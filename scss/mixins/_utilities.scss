// Générateur d'utilitaires
// Utilisé pour générer des utilitaires et imprimer des utilitaires
@mixin generate-utility($utility, $infix: "", $is-rfs-media-query: false) {
  $values: map-get($utility, values);

  // Si les valeurs sont une liste ou une chaîne, convertissez-la en une carte
  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
    $values: zip($values, $values);
  }

  $values2: map-get($utility, values2);

  @if type-of($values2) == "string" or type-of(nth($values2, 1)) != "list" {
    $values2: zip($values2, $values2);
  }

  $values3: map-get($utility, values3);

  @if type-of($values3) == "string" or type-of(nth($values3, 1)) != "list" {
    $values3: zip($values3, $values3);
  }

  $values4: map-get($utility, values4);

  @if type-of($values4) == "string" or type-of(nth($values4, 1)) != "list" {
    $values4: zip($values4, $values4);
  }

  $values5: map-get($utility, values5);

  @if type-of($values5) == "string" or type-of(nth($values5, 1)) != "list" {
    $values5: zip($values5, $values5);
  }

  @each $key, $value in $values {

    $properties: map-get($utility, property);

    $properties2: map-get($utility, property2);

    $properties3: map-get($utility, property3);

    $properties4: map-get($utility, property4);

    $properties5: map-get($utility, property5);

    // Plusieurs propriétés sont possibles, par exemple avec des marges ou des remplissages verticaux ou horizontaux
    @if type-of($properties) == "string" {
      $properties: append((), $properties);
    }

    @if type-of($properties2) == "string" {
      $properties2: append((), $properties2);
    }

    @if type-of($properties3) == "string" {
      $properties3: append((), $properties3);
    }

    @if type-of($properties4) == "string" {
      $properties4: append((), $properties4);
    }

    @if type-of($properties5) == "string" {
      $properties5: append((), $properties5);
    }

    // Utiliser la classe personnalisée si elle est présente
    $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
    $property-class: if($property-class == null, "", $property-class);

    // Utiliser la classe personnalisée divide
    $property-divide: if(map-has-key($utility, divide), map-get($utility, divide), " ");
    $property-divide: if($property-divide == true, " > " + " * + *", "");

    // Utilisez le nom de variable CSS personnalisé s'il est présent, sinon la valeur par défaut est `class`
    $css-variable-name: if(map-has-key($utility, css-variable-name), map-get($utility, css-variable-name), map-get($utility, class));

    // Paramètres d'état pour générer des pseudo-classes
    $state: if(map-has-key($utility, state), map-get($utility, state), ());

    $infix: if($property-class == "" and str-slice($infix, 1, 1) == "-", str-slice($infix, 2), $infix);

    // Ne pas préfixer si la clé de valeur est nulle (par exemple avec la classe shadow)
    // and $infix == ""
    $property-class-modifier: if(
      $key, if($property-class == "", "", "-") + $key, ""
    );

    @if map-get($utility, rfs) {
      // Inside the media query
      @if $is-rfs-media-query {
        $val: rfs-value($value);

        // Do not render anything if fluid and non fluid values are the same
        $value: if($val == rfs-fluid-value($value), null, $val);
      }
      @else {
        $value: rfs-fluid-value($value);
      }
    }

    $is-css-var: map-get($utility, css-var);
    $is-local-vars: map-get($utility, local-vars);
    $is-css-opac: map-get($utility, css-opac);
    
    $is-gradientsColors: map-get($utility, gradientsColors);
    
    $is-rtl: map-get($utility, rtl);

    @if $value != null {
      @if $is-rtl == false {
        /* rtl:begin:remove */
      }

      @if $is-css-opac and $is-css-opac == true {

        $values-css-var: map-get($utility, values-css-var);

        // Si les valeurs sont une liste ou une chaîne, convertissez-la en une carte
        @if type-of($values-css-var) == "string" or type-of(nth($values-css-var, 1)) != "list" {
          $values-css-var: zip($values-css-var, $values-css-var);
        }

        @if $values-css-var != null {
          
          @each $key-css-var, $value-css-var in $values-css-var {

            .#{ $infix + $property-class + $property-class-modifier}#{if($key-css-var, "\\/#{$key-css-var}", null)}#{$property-divide}{

              @if $is-local-vars {
                @each $local-var, $variable in $is-local-vars {
                  --#{$prefix}#{$local-var}: #{$value-css-var};
                }
              }

              @each $property in $properties {
                #{$property}: $value if($enable-important-utilities, !important, null);
              }

              @each $key2, $value2 in $values2{

                @each $property2 in $properties2 {
                  #{$property2}: $value2 if($enable-important-utilities and $property2, !important, null);
                }
                
              }

              @each $key3, $value3 in $values3{

                @each $property3 in $properties3 {
                  #{$property3}: $value3 if($enable-important-utilities and $property3, !important, null);
                }
                
              }

              @each $key4, $value4 in $values4{

                @each $property4 in $properties4 {
                  #{$property4}: $value4 if($enable-important-utilities and $property4, !important, null);
                }
                
              }

              @each $key5, $value5 in $values5{

                @each $property5 in $properties5 {
                  #{$property5}: $value5 if($enable-important-utilities and $property5, !important, null);
                }
                
              }
              
            }

            @each $pseudo in $state {
          
              @if $pseudo == after or $pseudo == before{
                
                .#{$infix}#{$pseudo}\:#{ $property-class + $property-class-modifier}#{if($key-css-var, "\\/#{$key-css-var}", null)}::#{$pseudo}#{$property-divide} {

                  @each $property in $properties {
    
                    @if $is-local-vars {
                      @each $local-var, $variable in $is-local-vars {
                        --#{$prefix}#{$local-var}: #{$value-css-var};
                      }
                    }
        
                    #{$property}: $value if($enable-important-utilities, !important, null);
                  }

                }
              }@else{
                
                .#{$infix}#{$pseudo}\:#{ $property-class + $property-class-modifier}#{if($key-css-var, "\\/#{$key-css-var}", null)}:#{$pseudo}#{$property-divide} {

                  @each $property in $properties {
    
                    @if $is-local-vars {
                      @each $local-var, $variable in $is-local-vars {
                        --#{$prefix}#{$local-var}: #{$value-css-var};
                      }
                    }
        
                    #{$property}: $value if($enable-important-utilities, !important, null);
                  }

                }
              }
            }

          }

        }

      }@else{

        @if $is-css-var {
          .#{ $infix + $property-class + $property-class-modifier}#{$property-divide} {
            --#{$prefix}#{$css-variable-name}: #{$value};
          }
  
          @each $pseudo in $state {
            .#{$infix}#{$pseudo}\:#{ $property-class + $property-class-modifier}:#{$pseudo} {
              --#{$prefix}#{$css-variable-name}: #{$value};
            }
          }
        } @else {
          
          .#{ $infix + $property-class + $property-class-modifier}#{$property-divide} {

            @each $property in $properties {
              @if $is-local-vars {
                @each $local-var, $variable in $is-local-vars {
                  --#{$prefix}#{$local-var}: #{$variable};
                }
              }
              #{$property}: $value if($enable-important-utilities, !important, null);
            }

            @each $key2, $value2 in $values2{
              @each $property2 in $properties2 {
                #{$property2}: $value2 if($enable-important-utilities and $property2, !important, null);
              }
            }

            @each $key3, $value3 in $values3{
              @each $property3 in $properties3 {
                #{$property3}: $value3 if($enable-important-utilities and $property3, !important, null);
              }
            }

            @each $key4, $value4 in $values4{
              @each $property4 in $properties4 {
                #{$property4}: $value4 if($enable-important-utilities and $property4, !important, null);
              }
            }

            @each $key5, $value5 in $values5{
              @each $property5 in $properties5 {
                #{$property5}: $value5 if($enable-important-utilities and $property5, !important, null);
              }
            }

          }
  
          @each $pseudo in $state {
            
            @if $pseudo == after or $pseudo == before{
              
              .#{$infix}#{$pseudo}\:#{ $property-class + $property-class-modifier}::#{$pseudo}#{$property-divide} {

                @each $property in $properties {
                  @if $is-local-vars {
                    @each $local-var, $variable in $is-local-vars {
                      --#{$prefix}#{$local-var}: #{$variable};
                    }
                  }
                  #{$property}: $value if($enable-important-utilities, !important, null);
                }

                @each $key2, $value2 in $values2{

                  @each $property2 in $properties2 {

                    #{$property2}: $value2 if($enable-important-utilities and $property2, !important, null);

                  }
                }

                @each $key3, $value3 in $values3{

                  @each $property3 in $properties3 {

                    #{$property3}: $value3 if($enable-important-utilities and $property3, !important, null);

                  }
                }

                @each $key4, $value4 in $values4{

                  @each $property4 in $properties4 {

                    #{$property4}: $value4 if($enable-important-utilities and $property4, !important, null);

                  }
                }

                @each $key5, $value5 in $values5{

                  @each $property5 in $properties5 {

                    #{$property5}: $value5 if($enable-important-utilities and $property5, !important, null);

                  }
                }

              }
            }@else{
              .#{$infix}#{$pseudo}\:#{ $property-class + $property-class-modifier}:#{$pseudo}#{$property-divide} {

                @each $property in $properties {
                  @if $is-local-vars {
                    @each $local-var, $variable in $is-local-vars {
                      --#{$prefix}#{$local-var}: #{$variable};
                    }
                  }
                  #{$property}: $value if($enable-important-utilities, !important, null);
                }

                @each $key2, $value2 in $values2{

                  @each $property2 in $properties2 {

                    #{$property2}: $value2 if($enable-important-utilities and $property2, !important, null);
                    
                  }

                }

                @each $key3, $value3 in $values3{

                  @each $property3 in $properties3 {

                    #{$property3}: $value3 if($enable-important-utilities and $property3, !important, null);
                    
                  }

                }

                @each $key4, $value4 in $values4{

                  @each $property4 in $properties4 {

                    #{$property4}: $value4 if($enable-important-utilities and $property4, !important, null);
                    
                  }

                }

                @each $key5, $value5 in $values5{

                  @each $property5 in $properties5 {

                    #{$property5}: $value5 if($enable-important-utilities and $property5, !important, null);
                    
                  }

                }

              }
            }
  
          }
          
        }
        
      }

      @if $is-rtl == false {
        /* rtl:end:remove */
      }
    }

    @if $value == null {
      
      @if map-has-key($utility, gradientsColors) and map-get($utility, gradientsColors) == true { 

        @include gradientsColors();

      }
      
    }
  }
}
