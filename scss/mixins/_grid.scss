// Système de grille
//
// Générez des colonnes de grille sémantique avec ces mixins.

@mixin make-row($gutter: $grid-gutter-width) {
  --#{$prefix}gutter-x: #{$gutter};
  --#{$prefix}gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  // TODO : revoir l'ordre de calcul après la correction de https://github.com/react-bootstrap/react-bootstrap/issues/6039
  margin-top: calc(-1 * var(--#{$prefix}gutter-y)); // stylelint-désactiver-ligne fonction-liste-interdite
  margin-right: calc(-.5 * var(--#{$prefix}gutter-x)); // stylelint-désactiver-ligne fonction-liste-interdite
  margin-left: calc(-.5 * var(--#{$prefix}gutter-x)); // stylelint-désactiver-ligne fonction-liste-interdite
}

@mixin make-col-ready() {
  // Ajouter la taille de la boîte si seule la grille est chargée
  box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
  // Empêchez les colonnes de devenir trop étroites dans les niveaux de grille plus petits en
  // définissant toujours `width: 100%;`. Cela fonctionne parce que nous définissons la largeur
  // plus tard pour remplacer cette largeur initiale.
  flex-shrink: 0;
  width: 100%;
  max-width: 100%; // Empêcher `.col-auto`, `.col` (et les variantes réactives) de sortir de la grille
  padding-right: calc(var(--#{$prefix}gutter-x) * .5); // stylelint-désactiver-ligne fonction-liste-interdite
  padding-left: calc(var(--#{$prefix}gutter-x) * .5); // stylelint-désactiver-ligne fonction-liste-interdite
  margin-top: var(--#{$prefix}gutter-y);
}

@mixin make-col($size: false, $columns: $grid-columns) {
  @if $size {
    flex: 0 0 auto;
    width: percentage(divide($size, $columns));

  } @else {
    flex: 1 1 0;
    max-width: 100%;
  }
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: divide($size, $columns);
  margin-left: if($num == 0, 0, percentage($num));
}

// Colonnes de lignes
//
// Spécifiez sur un élément parent (par exemple, .row) pour forcer les enfants immédiats dans NN
// nombre de colonnes. Prend en charge le retour à la ligne vers de nouvelles lignes, mais ne fait pas de grille de style Masonry
//.
@mixin row-cols($count) {
  > * {
    flex: 0 0 auto;
    width: percentage(divide(1, $count));
  }
}

// Génération de grille de framework
//
// Utilisé uniquement par Bootstrap pour générer le nombre correct de classes de grille données
// toute valeur de `$grid-columns`.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Fournir des classes de base `.col-{bp}` pour les colonnes flexbox de largeur égale
      .#{$infix}col {
        flex: 1 0 0%; // Flexbugs #4 : https://github.com/philipwalton/flexbugs#flexbug-4
      }

      .#{$infix}row-cols-auto > * {
        @include make-col-auto();
      }

      @if $grid-row-columns > 0 {
        @for $i from 1 through $grid-row-columns {
          .#{$infix}row-cols-#{$i} {
            @include row-cols($i);
          }
        }
      }

      .#{$infix}col-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .#{$infix}col-#{$i} {
            @include make-col($i, $columns);
          }
        }

        // `$columns - 1` car le décalage par la largeur d'une ligne entière n'est pas possible
        @for $i from 0 through ($columns - 1) {
          @if not ($infix == "" and $i == 0) { // Évitez d'émettre des .offset-0 inutiles
            .#{$infix}offset-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }

      // Gouttières
      //
      // Utilisez les utilitaires `.g-*`, `.gx-*` ou `.gy-*` pour modifier l'espacement entre les colonnes.
      @each $key, $value in $gutters {
        .#{$infix}g-#{$key},
        .#{$infix}gx-#{$key} {
          --#{$prefix}gutter-x: #{$value};
        }

        .#{$infix}g-#{$key},
        .#{$infix}gy-#{$key} {
          --#{$prefix}gutter-y: #{$value};
        }
      }
    }
  }
}

@mixin make-cssgrid($columns: $grid-columns, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @if $columns > 0 {
        @for $i from 1 through $columns {
          .#{$infix}g-col-#{$i} {
            grid-column: auto / span $i;
          }
        }

        // Commencez par `1` car `0` est une valeur non valide.
        // Se termine par `$columns - 1` car le décalage par la largeur d'une ligne entière n'est pas possible.
        @for $i from 1 through ($columns - 1) {
          .g-#{$infix}start-#{$i} {
            grid-column-start: $i;
          }
        }
      }
    }
  }
}
