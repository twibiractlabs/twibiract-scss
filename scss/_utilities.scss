$utilities: () !default;
// stylelint-disable-next-line scss/dollar-variable-default
$utilities: map-merge(
  (
    // scss-docs-start utlis-Layout
    // scss-docs-start utils-box
    "box-decoration": (
      class: box-decoration,
      property: box-decoration-break,
      values: clone slice,
    ),
    "box": (
      class: box,
      state: after before,
      property: box-sizing,
      values: border content,
    ),
    // scss-docs-start utils-display
    "display": (
      class: null,
      property: display,
      values: (
        block: block, inline-block: inline-block, inline: inline, flex: flex, inline-flex: inline-flex, table: table, table-row: table-row, grid: grid, inline-grid: inline-grid, none: none
      ),
      responsive: true,
      // print: true,
    ),
    // scss-docs-start utils-float
    "float": (
      property: float,
      values: (
        start: left,
        end: right,
        none: none,
      ),
      responsive: true,
    ),
    // scss-docs-end utils-float
    // Object Fit utilities
    // scss-docs-start utils-object
    "object-fit": (
      property: object-fit,
      values: (
        contain: contain,
        cover: cover,
        fill: fill,
        scale: scale-down,
        none: none,
      )
    ),
    "object-position": (
      property: object-position,
      class: object,
      values: ( bottom: bottom, center: center, left: left, left-bottom: left bottom, left-top: left top, right: right, right-bottom: right bottom, right-top: right top, top: top),
    ),
    // scss-docs-end utils-object    
    // scss-docs-start utils-overflow
    "overflow": (
      property: overflow,
      values: auto hidden clip visible scroll,
    ),
    "overflow-x": (
      property: overflow-x,
      values: auto hidden clip visible scroll,
    ),
    "overflow-y": (
      property: overflow-y,
      values: auto hidden clip visible scroll,
    ),
    // scss-docs-end utils-overflow
    // scss-docs-start utils-position
    "position": (
      property: position,
      class: null,
      state: after before,
      values: (static: static, fixed: fixed, absolute: absolute, relative: relative, sticky: sticky),
      responsive: true,
    ),
    // scss-docs-end utils-position
    // scss-docs-start utils-top-right-bottom-left
    "top": (
      property: top,
      class:  top,
      addcssVar: map,
      values: $position-values,
      responsive: true,
    ),
    "bottom": (
      property: bottom,
      class:  bottom,
      addcssVar: map,
      values: $position-values,
      responsive: true,
    ),
    "start": (
      property: left,
      class: left,
      addcssVar: map,
      values: $position-values,
      responsive: true,
    ),
    "end": (
      property: right,
      class: right,
      addcssVar: map,
      values: $position-values,
      responsive: true,
    ),
    // scss-docs-end utils-top-right-bottom-left
    // scss-docs-start utils-visibility
    "Visibility": (
      property: Visibility,
      class: null,
      values: (
        visible: visible, invisible: hidden, Visibility: collapse
      ),
    ),
    // scss-docs-end utils-visibility
    // scss-docs-start utils-zindex
    "z-index": (
      property: z-index,
      class: z,
      values: $zindex-levels
    ),
    // scss-docs-end utils-zindex
    // scss-docs-end utlis-Layout

    // scss-docs-start utlis-flebox
    "flex-direction": (
      property: flex-direction,
      class: flex,
      values: (row: row, row-reverse: row-reverse, col: column, col-reverse: column-reverse),
      responsive: true,
    ),
    "flex-wrap": (
      property: flex-wrap,
      class: flex,
      values: (wrap: wrap, wrap-reverse: wrap-reverse, nowrap: nowrap),
      responsive: true,
    ),
    "flex": (
      property: flex,
      class: flex,
      values: (1: 1 1 0%, auto: 1 1 auto, initial: 0 1 auto, none: none),
      responsive: true,
    ),
    "flex-grow": (
      property: flex-grow,
      class: grow,
      values: (0: 0, null: 1),
      responsive: true,
    ),
    "flex-shrink": (
      property: flex-shrink,
      class: shrink,
      values: (0: 0, null: 1),
      responsive: true,
    ),
    "order": (
      property: order,
      values: (
        1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, first: -99999, last: 99999, none: 0
      ),
      responsive: true,
    ),    
    // Gap utility
    "gap": (
      property: gap,
      class: gap,
      addcssVar: map,
      values: $spacers,
      responsive: true,
    ),
    "column-gap": (
      property: column-gap,
      class: gap-x,
      addcssVar: map,
      values: $spacers,
      responsive: true,
    ),
    "row-gap": (
      property: row-gap,
      class: gap-y,
      addcssVar: map,
      values: $spacers,
      responsive: true,
    ),
    "justify-content": (
      property: justify-content,
      class: justify,
      values: (normal: normal, start: flex-start, end: flex-end, center: center, between: space-between, around: space-around, evenly: space-evenly, stretch: stretch),
      responsive: true,
    ),
    "justify-items": (
      property: justify-items,
      class: justify-items,
      values: (start: start, end: end, center: center, stretch: stretch),
      responsive: true,
    ),
    "justify-self": (
      property: justify-self,
      class: justify-self,
      values: (start: start, end: end, center: center, stretch: stretch, auto: auto),
      responsive: true,
    ),    
    "align-content": (
      property: align-content,
      class: content,
      values: (normal: normal, center: center, start: flex-start, end: flex-end, between: space-between, around: space-around, evenly: space-evenly, baseline: baseline, stretch: stretch,),
      responsive: true,
    ),
    "align-items": (
      property: align-items,
      class: items,
      values: (start: flex-start, end: flex-end, center: center, baseline: baseline, stretch: stretch),
      responsive: true,
    ),
    "align-self": (
      property: align-self,
      class: self,
      values: (auto: auto, start: flex-start, end: flex-end, center: center, stretch: stretch, baseline: baseline),
      responsive: true,
    ),

    // scss-docs-end utils-flex
    // Margin utilities
    // scss-docs-start utils-spacing[inset, margin, spacers]
    "inset": (
      property: inset,
      class:  inset,
      addcssVar: map,
      state: after before,
      values: $spacers,
    ),
    "inset-x": (
      property: right left,
      class:  inset-x,
      addcssVar: map,
      state: after before,
      values: $spacers,
    ),
    "inset-y": (
      property: bottom top,
      class:  inset-y,
      addcssVar: map,
      state: after before,
      values: $spacers,
    ),
    // Negative inset utilities
    "negative-inset": (
      property: inset,
      class:  inset,
      addcssVar: map,
      state: after before,
      values: $negative-spacers,
      responsive: true,
    ),
    "negative-inset-x": (
      property: right left,
      class:  inset-x,
      addcssVar: map,
      state: after before,
      values: $negative-spacers,
      responsive: true,
    ),
    "negative-inset-y": (
      property: bottom top,
      class:  inset-y,
      addcssVar: map,
      state: after before,
      values: $negative-spacers,
      responsive: true,
    ),
    // margin utilities
    "margin": (
      property: margin,
      class: m,
      addcssVar: map,
      values: map-merge($spacers, (auto: auto)),
      responsive: true,
    ),
    "margin-x": (
      property: margin-right margin-left,
      class: mx,
      addcssVar: map,
      values: map-merge($spacers, (auto: auto)),
      responsive: true,
    ),
    "margin-y": (
      property: margin-top margin-bottom,
      class: my,
      addcssVar: map,
      values: map-merge($spacers, (auto: auto)),
      responsive: true,
    ),
    "margin-top": (
      property: margin-top,
      class: mt,
      addcssVar: map,
      values: map-merge($spacers, (auto: auto)),
      responsive: true,
    ),
    "margin-right": (
      property: margin-right,
      class: mr,
      addcssVar: map,
      values: map-merge($spacers, (auto: auto)),
      responsive: true,
    ),
    "margin-bottom": (
      property: margin-bottom,
      class: mb,
      addcssVar: map,
      values: map-merge($spacers, (auto: auto)),
      responsive: true,
    ),
    "margin-left": (
      property: margin-left,
      class: ml,
      addcssVar: map,
      values: map-merge($spacers, (auto: auto)),
      responsive: true,
    ),
    // Negative margin utilities
    "negative-margin": (
      property: margin,
      class: m,
      addcssVar: map,
      values: map-merge($negative-spacers, (auto: auto)),
      responsive: true,
    ),
    "negative-margin-x": (
      property: margin-right margin-left,
      class: mx,
      addcssVar: map,
      values: map-merge($negative-spacers, (auto: auto)),
      responsive: true,
    ),
    "negative-margin-y": (
      property: margin-top margin-bottom,
      class: my,
      addcssVar: map,
      values: map-merge($negative-spacers, (auto: auto)),
      responsive: true,
    ),
    "negative-margin-top": (
      property: margin-top,
      class: mt,
      addcssVar: map,
      values: map-merge($negative-spacers, (auto: auto)),
      responsive: true,
    ),
    "negative-margin-end": (
      property: margin-right,
      class: mr,
      addcssVar: map,
      values: map-merge($negative-spacers, (auto: auto)),
      responsive: true,
    ),
    "negative-margin-bottom": (
      property: margin-bottom,
      class: mb,
      addcssVar: map,
      values: map-merge($negative-spacers, (auto: auto)),
      responsive: true,
    ),
    "negative-margin-start": (
      property: margin-left,
      class: ml,
      addcssVar: map,
      values: map-merge($negative-spacers, (auto: auto)),
      responsive: true,
    ),
    // Padding utilities
    "padding": (
      property: padding,
      class: p,
      addcssVar: map,
      values: $spacers,
      responsive: true,
    ),
    "padding-x": (
      property: padding-right padding-left,
      class: px,
      addcssVar: map,
      values: $spacers,
      responsive: true,
    ),
    "padding-y": (
      property: padding-top padding-bottom,
      class: py,
      addcssVar: map,
      values: $spacers,
      responsive: true,
    ),
    "padding-top": (
      property: padding-top,
      class: pt,
      addcssVar: map,
      values: $spacers,
      responsive: true,
    ),
    "padding-right": (
      property: padding-right,
      class: pr,
      addcssVar: map,
      values: $spacers,
      responsive: true,
    ),
    "padding-bottom": (
      property: padding-bottom,
      class: pb,
      addcssVar: map,
      values: $spacers,
      responsive: true,
    ),
    "padding-left": (
      property: padding-left,
      class: pl,
      addcssVar: map,
      values: $spacers,
      responsive: true,
    ),

    // width-height utilities
    // scss-docs-start utils-sizing
    "width": (
      property: width,
      class: w,
      addcssVar: map,
      values: map-merge-multiple(
        (auto: auto), $spacers, $position-values
      ),
      responsive: true,
    ),
    "width-content": (
      property: width,
      class: w,
      values: (screen: 100vw, svw: 100svw, lvw: 100lvw, dvw: 100dvw, min: min-content, max: max-content, fit: fit-content),
      responsive: true,
    ),
    "max-width": (
      property: max-width,
      class: max-w,
      values: map-merge-multiple((full: 100%), (min: min-content, max: max-content, fit: fit-content, prose: 65ch, screen-sm: 576px, screen-md: 768px, screen-lg: 992px, screen-xl: 1024px, screen-xxl: 1280px, screen-2xl: 1536px)),
    ),
    "min-width": (
      property: min-width,
      class: min-w,
      values: map-merge-multiple((full: 100vw), (min: min-content, max: max-content, fit: fit-content)),
    ),
    "height": (
      property: height,
      class: h,
      addcssVar: map,
      values: map-merge-multiple(
        (auto: auto), $spacers, $position-values
      ),
      responsive: true,
    ),
    "height-content": (
      property: height,
      class: h,
      values: (screen: 100vh, svh: 100svh, lvh: 100lvh, dvh: 100dvh, min: min-content, max: max-content, fit: fit-content),
    ),
    "max-height": (
      property: max-height,
      class: max-h,
      values: map-merge-multiple((full: 100%), (screen: 100vh, svh: 100svh, lvh: 100lvh, dvh: 100dvh, min: min-content, max: max-content, fit: fit-content)),
    ),
    "min-height": (
      property: min-height,
      class: min-h,
      values: map-merge-multiple((screen: 100vh, svh: 100svh, lvh: 100lvh, dvh: 100dvh, min: min-content, max: max-content, fit: fit-content))
    ),
    "size": (
      property: height width,
      class: size,
      addcssVar: map,
      values: map-merge(
        $spacers, $position-values,
      ),
      responsive: true,
    ),

    // Typography
    // scss-docs-start utils-Typography
    "font-family": (
      property: font-family,
      class: font,
      values: (mono: var(--#{$prefix}font-monospace))
    ),
    "text-xs": (
      class: text,
      addcssVar: map,
      property:  font-size, values: (xs: $spacer * .75,), 
      property2: line-height, values2: $spacer,
      responsive: true,
    ),
    "text-sm": (
      class: text,
      addcssVar: map,
      property:  font-size, values: (sm: $spacer * .875,), 
      property2: line-height, values2: $spacer * 1.25,
      responsive: true,
    ),
    "text-base": (
      class: text,
      addcssVar: map,
      property:  font-size, values: (base: $spacer), 
      property2: line-height, values2: $spacer * 1.5,
      responsive: true,
    ),
    "text-lg": (
      class: text,
      addcssVar: map,
      property:  font-size, values: (lg: $spacer * 1.125), 
      property2: line-height, values2: $spacer * 1.75,
      responsive: true,
    ),
    "text-xl": (
      class: text,
      addcssVar: map,
      property:  font-size, values: (xl: $spacer * 1.25), 
      property2: line-height, values2: $spacer * 1.75,
      responsive: true,
    ),
    "text-2xl": (
      class: text,
      addcssVar: map,
      property:  font-size, values: (2xl: $spacer * 1.5), 
      property2: line-height, values2: $spacer * 2,
      responsive: true,
    ),
    "text-3xl": (
      class: text,
      addcssVar: map,
      property:  font-size, values: (3xl: $spacer * 1.875), 
      property2: line-height, values2: $spacer * 2.25,
      responsive: true,
    ),
    "text-4xl": (
      class: text,
      addcssVar: map,
      property:  font-size, values: (4xl: $spacer * 2.25), 
      property2: line-height, values2: $spacer * 2.5,
      responsive: true,
    ),
    "text-5xl": (
      class: text,
      addcssVar: map,
      property:  font-size, values: (5xl: $spacer * 3), 
      property2: line-height, values2: $spacer * 1,
      responsive: true,
    ),
    "text-6xl": (
      class: text,
      addcssVar: map,
      property:  font-size, values: (6xl: $spacer * 3.75), 
      property2: line-height, values2: $spacer * 1,
      responsive: true,
    ),
    "text-7xl": (
      class: text,
      addcssVar: map,
      property:  font-size, values: (7xl: $spacer * 4.5), 
      property2: line-height, values2: $spacer * 1,
      responsive: true,
    ),
    "text-8xl": (
      class: text,
      addcssVar: map,
      property:  font-size, values: (8xl: $spacer * 6), 
      property2: line-height, values2: $spacer * 1,
      responsive: true,
    ),
    "text-9xl": (
      class: text,
      addcssVar: map,
      property:  font-size, values: (9xl: $spacer * 8), 
      property2: line-height, values2: $spacer * 1,
      responsive: true,
    ),
    "antialiased": (
      class: antialiased,
      property:  -webkit-font-smoothing,  values: (null: antialiased), 
      property2: -moz-osx-font-smoothing, values2: (null: grayscale),
    ),
    "subpixel-antialiased": (
      class: subpixel-antialiased,
      property:  -webkit-font-smoothing,   values: (null: auto), 
      property2: -moz-osx-font-smoothing, values2: (null: auto),
    ),
    "font-style": (
      property: font-style,
      class: fst,
      values: italic normal
    ),
    "font-weight": (
      property: font-weight,
      class: fw,
      values: (thin: 100, extralight: 200, light: 300, normal:  400, medium:  500, semibold: 600, bold: 700, extrabold: 800, black: 900)
    ),
    "line-clamp-1": (
      class: line-clamp,
      property:  overflow,  values: (1: hidden), 
      property2: display, values2: (null: -webkit-box),
      property3: -webkit-box-orient, values3: (null: vertical),
      property4: -webkit-line-clamp, values4: (null: var(--#{$prefix}line-clamp, 1)),
    ),
    "line-clamp-none": (
      class: line-clamp,
      property:  overflow,  values: (none: visible), 
      property2: display, values2: (null: block),
      property3: -webkit-box-orient, values3: (null: horizontal),
      property4: -webkit-line-clamp, values4: (null: none),
    ),
    "line-height": (
      property: line-height,
      class: leading,
      values: (none: 1, "sm, .lh-tight": $line-height-sm, snug: 1.375, 'base, .lh-normal': $line-height-base, relaxed: 1.625, 'lg, .lh-loose': $line-height-lg, 3: $spacer * .75, 4: $spacer *  1, 5: $spacer *  1.25, 6: $spacer *  1.5, 7: $spacer *  1.75, 8: $spacer *  2, 9: $spacer *  2.25, 10: $spacer *  2.5),
    ),
    "text-align": (
      property: text-align,
      class: text,
      values: (
      left: left, center: center, right: right, justify: justify, start: start, end: end,
      ),
      responsive: true,
    ),
    "color": (
      property: color,
      class: text,
      local-vars: (
        "text-opacity": 1
      ),
      values: $utilities-text-colors,
    ),
    "color-body": (
      property: color,
      class: text,
      values: (
        "muted": var(--#{$prefix}secondary-color),
        "body-secondary": var(--#{$prefix}secondary-color),
        "body-tertiary": var(--#{$prefix}tertiary-color),
        "body-emphasis": var(--#{$prefix}emphasis-color),
        "reset": inherit,
      ),
    ),
    "text-color": (
      property: color,
      class: text,
      values: $utilities-text-emphasis-colors
    ),
    "text-opacity": (
      css-var: true,
      class: text-opacity,
      values: (10: .1, 25: .25, 50: .5, 75: .75, 100: 1)
    ),
    "text-decoration": (
      property: text-decoration,
      class: null,
      values: (no-underline: none, underline: underline, overline: overline, line-through: line-through),
    ),
    "link-underline": (
      property: text-decoration-color,
      class: decoration,
      local-vars: (
        "link-underline-opacity": 1
      ),
      values: map-merge(
        $utilities-links-underline,
        (
          null: rgba(var(--#{$prefix}link-color-rgb), var(--#{$prefix}link-underline-opacity, 1)),
        )
      )
    ),
    "link-underline-opacity": (
      css-var: true,
      class: decoracity,
      state: hover,
      values: (10: .1, 25: .25, 50: .5, 75: .75, 100: 1),
    ),
    "link-underline-style": (
      property: text-decoration-style,
      class: decoration,
      state: hover,
      values: solid double dotted dashed wavy,
    ),
    "link-underline-thickness": (
      property: text-decoration-thickness,
      class: decoration,
      state: hover,
      addcssVar: map,
      values: (auto: auto, 2: 2px),
    ),
    "link-underline-offset": (
      property: text-underline-offset,
      class: underline-offset,
      state: hover,
      addcssVar: map,
      values: (auto: auto, 2: 2px),
    ),
    "text-transform": (
      property: text-transform,
      class: null,
      values: (uppercase: uppercase, lowercase: lowercase, capitalize: capitalize, normal: none),
    ),
    "truncate": (
      class: truncate,
      property: overflow, values: (null: hidden),
      property2: text-overflow, values2: (null: ellipsis),
      property3: white-space, values3: (null: nowrap),
    ),
    "text-overflow": (
      property: text-overflow,
      class: text,
      values: (ellipsis: ellipsis, clip: clip),
    ),
    "text-wrap": (
      property: text-wrap,
      class: text,
      values: (wrap: wrap, nowrap: nowrap, balance: balance, pretty: pretty),
    ),
    "align": (
      property: vertical-align,
      class: align,
      values: baseline top middle bottom text-bottom text-top inherit,
    ),
    "white-space": (
      property: white-space,
      class: whitespace,
      values: (normal: normal, nowrap: nowrap, pre: pre, pre-line: pre-line, pre-wrap: pre-wrap, break-spaces: break-spaces),
    ),
    "break-normal": (
      property: word-break overflow-wrap,
      class: break,
      values: normal,
    ),
    "break-all": (
      property: word-break,
      class: break,
      values: (all: break-all,keep: keep-all),
    ),    
    "content": (
      property: content,
      class: content,
      state: after before,
      values: (none: ""),
    ),

    // backgrounds-utils
    "background-attachment": (
      property: background-attachment,
      class: bg,
      values: (fixed: fixed, local: local, scroll: scroll),
    ),
    "background-clip": (
      property: background-clip,
      class: bg-clip,
      values: (border: border-box, padding: padding-box, content: content-box, text: text),
    ),
    "background-color": (
      property: background-color,
      class: bg,
      local-vars: (
        "bg-opacity": 1
      ),
      values: $utilities-bg-colors,
    ),
    "background-color-body": (
      property: background-color,
      class: bg,
      values: (
        "transparent": transparent,
        "body-secondary": rgba(var(--#{$prefix}secondary-bg-rgb), var(--#{$prefix}bg-opacity)),
        "body-tertiary": rgba(var(--#{$prefix}tertiary-bg-rgb), var(--#{$prefix}bg-opacity)),
      ),
    ),
    "subtle-background-color": (
      property: background-color,
      class: bg,
      values: $utilities-bg-subtle
    ),
    "bg-opacity": (
      css-var: true,
      class: bg-opacity,
      values: (10: .1, 25: .25, 50: .5, 75: .75, 100: 1),
    ),
    "background-origin": (
      property: background-origin,
      class: bg-origin,
      values: (border: border-box, padding: padding-box, content: content-box),
    ),
    "background-position": (
      property: background-position,
      class: bg,
      values: (bottom: bottom, center: center, left: left, left-bottom: left bottom, left-top: left top, right: right, right-bottom: right bottom, right-top: right top, top: top),
    ),
    "background-repeat": (
      property: background-repeat,
      class: bg,
      values: (repeat: repeat, no-repeat: no-repeat, repeat-x: repeat-x, repeat-y: repeat-y, repeat-round: round, repeat-space: space),
    ),
    "background-size": (
      property: background-size,
      class: bg,
      values: (auto: auto, cover: cover, contain: contain),
    ),
    "background-image": (
      property: background-image,
      class: bg,
      values: (
        gradient-none: none,
        gradient-to-t: linear-gradient(to top, var(--#{$prefix}gradient-stops)),
        gradient-to-tr: linear-gradient(to top right, var(--#{$prefix}gradient-stops)),
        gradient-to-r: linear-gradient(to right, var(--#{$prefix}gradient-stops)),
        gradient-to-br: linear-gradient(to bottom right, var(--#{$prefix}gradient-stops)),
        gradient-to-b: linear-gradient(to bottom, var(--#{$prefix}gradient-stops)),
        gradient-to-bl: linear-gradient(to bottom left, var(--#{$prefix}gradient-stops)),
        gradient-to-l: linear-gradient(to left, var(--#{$prefix}gradient-stops)),
        gradient-to-tl: linear-gradient(to top left, var(--#{$prefix}gradient-stops))
      )
    ),
    "gradientsColors": (
      gradientsColors: true,
      values: null,
    ),
    "gradient": (
      property: background-image,
      class: bg,
      values: (gradient: var(--#{$prefix}gradient))
    ),

    // scss-docs-start utlis-Borders
    // scss-docs-start utils-border-radius
    "rounded": (
      property: border-radius,
      class: rounded,
      values: (
        none: 0,
        sm: var(--#{$prefix}border-radius-sm),
        null: var(--#{$prefix}border-radius),
        md: var(--#{$prefix}border-radius),
        lg: var(--#{$prefix}border-radius-lg),
        xl: var(--#{$prefix}border-radius-xl),
        2xl: var(--#{$prefix}border-radius-xxl),
        circle: 50%,
        full: var(--#{$prefix}border-radius-pill)
      )
    ),
    "rounded-top": (
      property: border-top-left-radius border-top-right-radius,
      class: rounded-top,
      values: (
        none: 0,
        sm: var(--#{$prefix}border-radius-sm),
        null: var(--#{$prefix}border-radius),
        md: var(--#{$prefix}border-radius),
        lg: var(--#{$prefix}border-radius-lg),
        xl: var(--#{$prefix}border-radius-xl),
        2xl: var(--#{$prefix}border-radius-xxl),
        circle: 50%,
        full: var(--#{$prefix}border-radius-pill)
      )
    ),
    "rounded-end": (
      property: border-top-right-radius border-bottom-right-radius,
      class: rounded-end,
      values: (
        none: 0,
        sm: var(--#{$prefix}border-radius-sm),
        null: var(--#{$prefix}border-radius),
        md: var(--#{$prefix}border-radius),
        lg: var(--#{$prefix}border-radius-lg),
        xl: var(--#{$prefix}border-radius-xl),
        2xl: var(--#{$prefix}border-radius-xxl),
        circle: 50%,
        full: var(--#{$prefix}border-radius-pill)
      )
    ),
    "rounded-bottom": (
      property: border-bottom-right-radius border-bottom-left-radius,
      class: rounded-bottom,
      values: (
        none: 0,
        sm: var(--#{$prefix}border-radius-sm),
        null: var(--#{$prefix}border-radius),
        md: var(--#{$prefix}border-radius),
        lg: var(--#{$prefix}border-radius-lg),
        xl: var(--#{$prefix}border-radius-xl),
        2xl: var(--#{$prefix}border-radius-xxl),
        circle: 50%,
        full: var(--#{$prefix}border-radius-pill)
      )
    ),
    "rounded-start": (
      property: border-bottom-left-radius border-top-left-radius,
      class: rounded-start,
      values: (
        none: 0,
        sm: var(--#{$prefix}border-radius-sm),
        null: var(--#{$prefix}border-radius),
        md: var(--#{$prefix}border-radius),
        lg: var(--#{$prefix}border-radius-lg),
        xl: var(--#{$prefix}border-radius-xl),
        2xl: var(--#{$prefix}border-radius-xxl),
        circle: 50%,
        full: var(--#{$prefix}border-radius-pill)
      )
    ),
    // scss-docs-end utils-border-radius
    // scss-docs-start utils-borders
    "border": (
      property: border,
      class: brd,
      state: after before,
      values: (
        null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      )
    ),
    "border-x": (
      property: border-right border-left,
      class: brd-x,
      state: after before,
      values: (
        null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      ),
    ),
    "border-y": (
      property: border-top border-bottom,
      class: brd-y,
      state: after before,
      values: (
        null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      ),
    ),
    "border-top": (
      property: border-top,
      class: brd-t,
      state: after before,
      values: (
        null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      )
    ),
    "border-end": (
      property: border-right,
      class: brd-r,
      state: after before,
      values: (
        null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      )
    ),
    "border-bottom": (
      property: border-bottom,
      class: brd-b,
      state: after before,
      values: (
        null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      )
    ),
    "border-start": (
      property: border-left,
      class: brd-l,
      state: after before,
      values: (
        null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      )
    ),
    "border-width": (
      property: border-width,
      class: brd,
      state: after before,
      values: map-merge((0:0), $border-widths),
    ),
    "border-width-x": (
      property: border-right-width border-left-width,
      class: brd-x,
      state: after before,
      values: map-merge((0:0), $border-widths),
    ),
    "border-width-y": (
      property: border-top-width border-bottom-width,
      class: brd-y,
      state: after before,
      values: map-merge((0:0), $border-widths),
    ),
    "border-width-top": (
      property: border-top-width,
      class: brd-t,
      state: after before,
      values: map-merge((0:0), $border-widths),
    ),
    "border-width-right": (
      property: border-right-width,
      class: brd-r,
      state: after before,
      values: $border-widths,
    ),
    "border-width-bottom": (
      property: border-bottom-width,
      class: brd-b,
      state: after before,
      values: map-merge((0:0), $border-widths),
    ),
    "border-width-left": (
      property: border-left-width,
      class: brd-l,
      state: after before,
      values: map-merge((0:0), $border-widths),
    ),
    "border-color": (
      property: border-color,
      class: brd,
      state: after before,
      local-vars: (
        "border-opacity": 1
      ),
      values: $utilities-border-colors
    ),
    "subtle-border-color": (
      property: border-color,
      class: brd,
      values: $utilities-border-subtle
    ),
    "border-opacity": (
      property: --#{$prefix}border-opacity,
      state: after before,
      class: brd-opacity,
      values: (10: .1, 25: .25, 50: .5, 75: .75, 100: 1)
    ),
    "border-style": (
      property: border-style,
      state: after before,
      class: brd,
      values: (
        solid: solid, dashed: dashed, dotted: dotted, double: double, hidden: hidden, none: none),
    ),

    // utils-effets
    // scss-docs-start utils-shadow
    "shadow": (
      property: box-shadow,
      class: shadow,
      values: (
        null: #{$box-shadow},
        sm: #{$box-shadow-sm},
        lg: #{$box-shadow-lg},
        inset: #{$box-shadow-inset},
        none: none,
      )
    ),
    "shadow-color": (
      property: --#{$prefix}shadow-color,
      class: shadow,
      values: $theme-colors-rgb
    ),
    "shadow-opacity": (
      property: --#{$prefix}shadow-opacity,
      class: shadow,
      values: (10: .1, 25: .25, 50: .5, 75: .75, 100: 1)
    ),
    // scss-docs-start utils-opacity
    "opacity": (
      property: opacity,
      values: (10: .1, 25: .25, 50: .5, 75: .75, 100: 1)
    ),

    // utils-effets
    // scss-docs-start utils-shadow
    "filter-blur": (
      class: blur,
      property: filter,
      values: (none:  null, sm: blur(4px), null: blur(8px), md: blur(12px), lg: blur(16px), xl: blur(24px), 2xl: blur(40px), 3xl: blur(64px))
    ),
    "backdrop-blur": (
      class: backdrop-blur,
      property: backdrop-filter,
      values: (
        none:  null, sm: blur(4px), null: blur(8px), md: blur(12px), lg: blur(16px), xl: blur(24px), 2xl: blur(40px), 3xl: blur(64px)),
    ),
  ),
  $utilities
);